<?php

use Drupal\Core\Render\Markup;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\commerce_title_html\Entity\CommerceProductTypeSettings;
use Drupal\commerce_title_html\Entity\CommerceProductVariationTypeSettings;
use Drupal\commerce_title_html\Entity\CommerceStoreTypeSettings;
use Drupal\commerce_product\Entity\Product;
use Drupal\field\Entity\FieldConfig;
use Drupal\title_html\CopyTitle;

function commerce_title_html_commerce_entity_info() {
  $info = [
    'commerce_product' => [
      'bundle_entity_type' => 'commerce_product_type',
      'settings_entity' => 'CommerceProductTypeSettings'
    ],
    'commerce_product_variation' => [
      'bundle_entity_type' => 'commerce_product_variation_type',
      'settings_entity' => 'CommerceProductVariationTypeSettings'
    ],
    'commerce_store' => [
      'bundle_entity_type' => 'commerce_store_type',
      'settings_entity' => 'CommerceStoreTypeSettings'
    ],
  ];

  return $info;
}

function commerce_title_html_preprocess_field__commerce_product__title(&$variables, $hook) {
  $product = $variables['element']['#object'];
  $product_type_settings = CommerceProductTypeSettings::load($product->bundle());
  if (!empty($product_type_settings->html_title_field)) {
    $html_title_field = $product->get($product_type_settings->html_title_field);
    foreach ($variables['items'] as $delta => &$item) {
      $item['content']['#context']['value'] = Markup::create(check_markup($html_title_field->value, $html_title_field->format));
      // Default inline template comes with nl2br filter which converts new line characters to br tags.
      // That behavior can be easily restore as we are using text format by enabling filter "Convert line breaks into HTML (i.e. <br> and <p>)".
      $item['content']['#template'] = '{{ value }}';
    }
  }
}

function commerce_title_html_preprocess_field__commerce_product_variation__title(&$variables, $hook) {
  $entity = $variables['element']['#object'];
  $type_settings = CommerceProductVariationTypeSettings::load($entity->bundle());
  if (!empty($type_settings->html_title_field)) {
    $html_title_field = $entity->get($type_settings->html_title_field);
    foreach ($variables['items'] as $delta => &$item) {
      $item['content']['#context']['value'] = Markup::create(check_markup($html_title_field->value, $html_title_field->format));
      // Default inline template comes with nl2br filter which converts new line characters to br tags.
      // That behavior can be easily restore as we are using text format by enabling filter "Convert line breaks into HTML (i.e. <br> and <p>)".
      $item['content']['#template'] = '{{ value }}';
    }
  }
}

function commerce_title_html_preprocess_field__commerce_store__title(&$variables, $hook) {
  $entity = $variables['element']['#object'];
  $type_settings = CommerceStoreTypeSettings::load($entity->bundle());
  if (!empty($type_settings->html_title_field)) {
    $html_title_field = $entity->get($type_settings->html_title_field);
    foreach ($variables['items'] as $delta => &$item) {
      $item['content']['#context']['value'] = Markup::create(check_markup($html_title_field->value, $html_title_field->format));
      // Default inline template comes with nl2br filter which converts new line characters to br tags.
      // That behavior can be easily restore as we are using text format by enabling filter "Convert line breaks into HTML (i.e. <br> and <p>)".
      $item['content']['#template'] = '{{ value }}';
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function commerce_title_html_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_state->getFormObject() instanceof EntityFormInterface) {
    $entity_type = $form_state->getFormObject()->getEntity()->getEntityTypeId();
    $current_operation = $form_state->getFormObject()->getOperation();

    $entity = $form_state->getFormObject()->getEntity();

    $commerce_entity_bundle_entity_types = [];

    foreach (commerce_title_html_commerce_entity_info() as $entity_type_id => $info) {
      $commerce_entity_bundle_entity_types[$info['bundle_entity_type']] = $info;
    }

    if (in_array($entity_type, array_keys($commerce_entity_bundle_entity_types)) && $current_operation == 'edit') {
      $type = $entity->id();

      $settings_entity_class = $commerce_entity_bundle_entity_types[$entity_type]['settings_entity'];

      $product_type_settings = call_user_func("Drupal\\commerce_title_html\\Entity\\" . $settings_entity_class .'::load', $type);

      $form_state->set('title_html_settings', $product_type_settings);
      // Wrap everything in a fieldset.
      $form['title_html'] = [
        '#type' => 'details',
        '#title' => t('Title HTML Settings'),
        '#collapsed' => FALSE,
        '#collapsible' => TRUE,
        '#group' => 'additional_settings',
        '#attributes' => ['class' => ['title-html-settings-form']],
      ];

      $form['title_html']['enable_title_html_field'] = [
        '#type' => 'checkbox',
        '#title' => t('Enable Title HTML Field'),
        '#default_value' => (bool) $product_type_settings->html_title_field,
      ];

      if (empty($product_type_settings->html_title_field)) {
        // 
      }
      else {
        $form['title_html']['html_title_field'] = [
          '#markup' => '<p>' . t('HTML Title is enabled with field "@field".', ['@field' => $product_type_settings->html_title_field]) . '</p>',
        ];
      }

      array_unshift($form['actions']['submit']['#submit'], 'commerce_title_html_content_type_form_submit');
    }
  }
}

/**
 * @see commerce_title_html_form_alter()
 */
function commerce_title_html_content_type_form_submit($form, FormStateInterface $form_state) {
  $product_type_settings = $form_state->get('title_html_settings');
  $old_enable_title_html_field = (bool) $product_type_settings->html_title_field;
  $enable_title_html_field = (bool) $form_state->getValue('enable_title_html_field');
  if ($old_enable_title_html_field != $enable_title_html_field) {
    $bundle_entity_type = $form_state->getFormObject()->getEntity()->getEntityTypeId();
    $entity_type = NULL;
    foreach (commerce_title_html_commerce_entity_info() as $entity_type_id => $info) {
      if ($info['bundle_entity_type'] == $bundle_entity_type) {
        $entity_type = $entity_type_id;
      }
    }
    if (!empty($entity_type)) {
      if ($enable_title_html_field) {
        $field = NULL;
        if (CopyTitle::createTitleHtmlField($entity_type, $product_type_settings->id, $field)) {
          $product_type_settings->html_title_field = $field->getName();
          $product_type_settings->save();

          // Assign widget settings for the 'default' form mode.
          entity_get_form_display($entity_type, $product_type_settings->id, 'default')
            ->setComponent('title_html', [
              'type' => 'text_textarea',
              'weight' => 0,
            ])
            ->save();

          // Hide default title from node form.
          entity_get_form_display($entity_type, $product_type_settings->id, 'default')
            ->removeComponent('title')
            ->save();

          // Title will be displayed as other way not to be disaplyed as regular field.
          entity_get_display($entity_type, $product_type_settings->id, 'default')
            ->removeComponent('title_html')
            ->save();

          // The teaser view mode is created by the Standard profile and therefore
          // might not exist.
          $view_modes = \Drupal::service('entity_display.repository')->getViewModes($entity_type);
          if (isset($view_modes['teaser'])) {
            entity_get_display($entity_type, $product_type_settings->id, 'teaser')
              ->removeComponent('title_html')
              ->save();
          }

          $batch = [
            'title' => t('Copying titles to new HTML title field'),
            'init_message' => t('Copying titles...'),
            'operations' => [
              ['\Drupal\title_html\CopyTitle::copyTitles', [$entity_type, $product_type_settings->id, 'title']],
            ],
            'finished' => '\Drupal\title_html\CopyTitle::finishedCopying',
          ];
          batch_set($batch);
        }
      }
      else {
        CopyTitle::deleteTitleHtmlField($entity_type, $product_type_settings->id);
        $product_type_settings->html_title_field = NULL;
        $product_type_settings->save();
      }
    }
  }
}

/**
 * Implements hook_entity_presave()
 */
function commerce_title_html_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  $info = commerce_title_html_commerce_entity_info();

  if (in_array($entity->getEntityTypeId(), array_keys($info))) {
    $settings_entity_class = $info[$entity->getEntityTypeId()]['settings_entity'];
    $type_settings = call_user_func("Drupal\\commerce_title_html\\Entity\\" . $settings_entity_class .'::load', $entity->bundle());
    if (!empty($type_settings->html_title_field)) {
      if ($entity->getEntityTypeId() == 'commerce_store') {
        $entity->setName(html_entity_decode(strip_tags($entity->get($type_settings->html_title_field)->value)));
      }
      else {
        $entity->setTitle(html_entity_decode(strip_tags($entity->get($type_settings->html_title_field)->value)));
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete()
 */
function commerce_title_html_field_config_delete(FieldConfig $entity) {
  $entity_type = $entity->getTargetEntityTypeId();
  $name = $entity->getName();

  $info = commerce_title_html_commerce_entity_info();

  if (in_array($entity->getTargetEntityTypeId(), array_keys($info))) {
    $settings_entity_class = $info[$entity->getTargetEntityTypeId()]['settings_entity'];

    $product_type_settings = call_user_func("Drupal\\commerce_title_html\\Entity\\" . $settings_entity_class .'::load', $entity->getTargetBundle());
    if ($entity->getName() == $product_type_settings->html_title_field) {
      $product_type_settings->html_title_field = NULL;
      $product_type_settings->save();
    }
  }
}
